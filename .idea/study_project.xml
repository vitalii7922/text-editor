<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="Looks like you like challenges! This project, however, is not too tricky if you’re feeling like an advanced learner. A text editor you’re going to write allows to search for specific files and open them. Check out the prerequisites, and if you’re ready, let’s roll!&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/38&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA 11" />
          <option name="languageCode" value="en" />
          <option name="name" value="Text Editor" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="201" />
                <option name="stepId" value="5258" />
                <option name="title" value="A window to editing" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="202" />
                <option name="stepId" value="5259" />
                <option name="title" value="Saved and loaded" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="203" />
                <option name="stepId" value="5260" />
                <option name="title" value="Menu, please!" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="204" />
                <option name="stepId" value="5261" />
                <option name="title" value="Searching" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="502" />
                      <option name="theoryId" value="6865" />
                      <option name="title" value="Units of information" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="362" />
                      <option name="theoryId" value="5544" />
                      <option name="title" value="Binary numbers" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="480" />
                      <option name="theoryId" value="6577" />
                      <option name="title" value="Command line overview" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="352" />
                      <option name="theoryId" value="5514" />
                      <option name="title" value="The basic window in Swing" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="452" />
                      <option name="theoryId" value="6295" />
                      <option name="title" value="Swing components" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="15" />
                      <option name="theoryId" value="3500" />
                      <option name="title" value="Introduction to Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="147" />
                      <option name="theoryId" value="3522" />
                      <option name="title" value="Basic literals" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="148" />
                      <option name="theoryId" value="3521" />
                      <option name="title" value="Overview of the basic program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="193" />
                      <option name="theoryId" value="3749" />
                      <option name="title" value="Printing data" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="14" />
                      <option name="theoryId" value="3518" />
                      <option name="title" value="Types and variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="161" />
                      <option name="theoryId" value="3532" />
                      <option name="title" value="Sizes and ranges" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="32" />
                      <option name="theoryId" value="3510" />
                      <option name="title" value="Type casting" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="309" />
                      <option name="theoryId" value="5035" />
                      <option name="title" value="Primitive and reference types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="571" />
                      <option name="theoryId" value="7427" />
                      <option name="title" value="Final variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="30" />
                      <option name="theoryId" value="3520" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="112" />
                      <option name="theoryId" value="3513" />
                      <option name="title" value="Naming variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="146" />
                      <option name="theoryId" value="3519" />
                      <option name="title" value="Arithmetic operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="191" />
                      <option name="theoryId" value="3739" />
                      <option name="title" value="Write, compile and run" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="608" />
                      <option name="theoryId" value="7929" />
                      <option name="title" value="Immutability" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="60" />
                      <option name="theoryId" value="3497" />
                      <option name="title" value="What is an exception" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="59" />
                      <option name="theoryId" value="3570" />
                      <option name="title" value="Hierarchy of exceptions" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="65" />
                      <option name="theoryId" value="3552" />
                      <option name="title" value="Exception handling" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="164" />
                      <option name="theoryId" value="1945" />
                      <option name="title" value="NPE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="167" />
                      <option name="theoryId" value="3492" />
                      <option name="title" value="Generic programming" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="48" />
                      <option name="theoryId" value="3601" />
                      <option name="title" value="Functional interfaces and lambda expressions" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="172" />
                      <option name="theoryId" value="3635" />
                      <option name="title" value="Files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="173" />
                      <option name="theoryId" value="3636" />
                      <option name="title" value="Reading files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="177" />
                      <option name="theoryId" value="3652" />
                      <option name="title" value="Writing files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="163" />
                      <option name="theoryId" value="3536" />
                      <option name="title" value="Errors in programs" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="152" />
                      <option name="theoryId" value="3506" />
                      <option name="title" value="Ternary operator" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="96" />
                      <option name="theoryId" value="4727" />
                      <option name="title" value="Objects" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="6" />
                      <option name="theoryId" value="3595" />
                      <option name="title" value="Boxing and unboxing" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="470" />
                      <option name="theoryId" value="6427" />
                      <option name="title" value="JMenu" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="266" />
                      <option name="theoryId" value="4953" />
                      <option name="title" value="Computer algorithms" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="263" />
                      <option name="theoryId" value="4991" />
                      <option name="title" value="The big O notation" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="267" />
                      <option name="theoryId" value="5161" />
                      <option name="title" value="Data structures" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="644" />
                      <option name="theoryId" value="8228" />
                      <option name="title" value="Pseudocode basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="645" />
                      <option name="theoryId" value="8233" />
                      <option name="title" value="Complex constructions in pseudocode" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="318" />
                      <option name="theoryId" value="5252" />
                      <option name="title" value="Stack" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="343" />
                      <option name="theoryId" value="5350" />
                      <option name="title" value="Queue" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="345" />
                      <option name="theoryId" value="5356" />
                      <option name="title" value="Deque" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="537" />
                      <option name="theoryId" value="7255" />
                      <option name="title" value="Fixed-size array" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="346" />
                      <option name="theoryId" value="5357" />
                      <option name="title" value="Dynamic array" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="577" />
                      <option name="theoryId" value="7580" />
                      <option name="title" value="Regexps basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="62" />
                      <option name="theoryId" value="3600" />
                      <option name="title" value="Basics of multithreading" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="295" />
                      <option name="theoryId" value="4875" />
                      <option name="title" value="Threads as objects" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="294" />
                      <option name="theoryId" value="4876" />
                      <option name="title" value="Custom threads" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="72" />
                      <option name="theoryId" value="3619" />
                      <option name="title" value="Thread management" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="297" />
                      <option name="theoryId" value="4882" />
                      <option name="title" value="Exceptions in threads" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="77" />
                      <option name="theoryId" value="3610" />
                      <option name="title" value="Working with shared data and problems" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="86" />
                      <option name="theoryId" value="3557" />
                      <option name="title" value="Thread synchronization" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="168" />
                      <option name="theoryId" value="3493" />
                      <option name="title" value="Generics and Object" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="178" />
                      <option name="theoryId" value="3670" />
                      <option name="title" value="Regexps in Java" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="Looks like you like challenges! This project, however, is not too tricky if you’re feeling like an advanced learner. A text editor you’re going to write allows to search for specific files and open them. Check out the prerequisites, and if you’re ready, let’s roll!" />
              <option name="id" value="38" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/203023/additional_files.json" />
              <option name="language" value="java" />
              <option name="templateBased" value="false" />
              <option name="title" value="Text Editor" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="3" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Text Editor" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" value="stage1" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;When you are programming, you use a text editor. But you can do a lot more with a text editor than just programming. You can make notes in the text files and save important or temporary information somewhere. In this project, you will write a functional text editor that allows you to do the same things. We will use Swing to create a graphical user interface (GUI).&lt;/p&gt;&#10;&#10;&lt;p&gt;In Swing, the class that represents an empty window is &lt;strong&gt;JFrame&lt;/strong&gt;. Actually, all of the classes that represent graphic elements in Swing start with the letter 'J.' Don't confuse these classes with classes that represent graphic elements of the AWT library (for example, the class Button in the AWT library versus the class JButton in the Swing library).&lt;/p&gt;&#10;&#10;&lt;p&gt;To improve the basic window, you should extend this class and write your own logic for the window. Let's see this code below in the constructor of TextEditor class that extends JFrame:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); &#10;setSize(300, 300);&#10;setVisible(true); &#10;setLayout(null);&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Without the first line, if you close the program, your program would be still running, and after that, you can only kill it using the task manager or the IDE (if you are running it under an IDE).&lt;/p&gt;&#10;&#10;&lt;p&gt;The second line sets the size of the window. Without it, the program would be 0 pixels in width and height. Of course, nothing can fit in this window size. And if you run the program, you would see nothing because the window is invisible by default. The third line fixes this. The fourth line means that there won't be any strategy for placing the elements on the screen. We will discuss later about different layouts. For now, you can place components on the window using absolute coordinates and bounds.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can place any component anywhere using &lt;code&gt;component.setLocation(int x , int y)&lt;/code&gt; and &lt;code&gt;component.setSize(int width, int height)&lt;/code&gt;. If you want to change both the size and the location of the component, you may want to use &lt;code&gt;component.setBounds(int x, int y, int width, int height)&lt;/code&gt;.  To add a Swing component to the window, you need to invoke the &lt;code&gt;add&lt;/code&gt; method and pass the component as a parameter. For example: &lt;code&gt;add(component)&lt;/code&gt; .&lt;/p&gt;&#10;&#10;&lt;p&gt;Also, you can use the method &lt;code&gt;setTitle&lt;/code&gt; to set the name of the window.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can find the list of components &lt;a href=&quot;http://zetcode.com/tutorials/javaswingtutorial/basicswingcomponents/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://zetcode.com/tutorials/javaswingtutorial/basicswingcomponentsII/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;. In this stage, you need to write the most suitable component for our needs; &lt;strong&gt;JTextArea&lt;/strong&gt;. For now, you can only edit text in the program, not save it or load it to the hard drive.&lt;/p&gt;&#10;&#10;&lt;p&gt;For the testing reasons, you need to set the name of each component using the method &lt;code&gt;component.setName(String name)&lt;/code&gt;&lt;br&gt;&#10;For now, there is only one component - &lt;code&gt;JTextArea&lt;/code&gt; and you should name it &quot;TextArea&quot;&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an example of how your basic text editor might look.&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/ad316e73-bbf0-4031-8c66-e3cccbb2d543/&quot;&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/38/stages/201/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5258" />
                      <option name="index" value="1" />
                      <option name="name" value="A window to editing" />
                      <option name="record" value="3" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/editor/TextEditor.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/editor/TextEditor.java" />
                                <option name="text" value="package editor;&#10;&#10;import javax.swing.*;&#10;&#10;public class TextEditor extends JFrame {&#10;    public TextEditor() {&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setSize(300, 300);&#10;        setVisible(true);&#10;        setLayout(null);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/editor/ApplicationRunner.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/editor/ApplicationRunner.java" />
                                <option name="text" value="package editor;&#10;&#10;&#10;public class ApplicationRunner {&#10;    public static void main(String[] args) {&#10;        new TextEditor();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/EditorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/EditorTest.java" />
                                <option name="text" value="import editor.TextEditor;&#10;import org.assertj.swing.fixture.JTextComponentFixture;&#10;import org.hyperskill.hstest.v6.stage.SwingTest;&#10;import org.hyperskill.hstest.v6.testcase.CheckResult;&#10;import org.hyperskill.hstest.v6.testcase.TestCase;&#10;&#10;import java.util.List;&#10;import java.util.function.Supplier;&#10;&#10;class TestClue {&#10;&#10;    public Supplier&lt;Boolean&gt; function;&#10;    public String feedback;&#10;&#10;    public TestClue(String feedback, Supplier&lt;Boolean&gt; function) {&#10;        this.function = function;&#10;        this.feedback = feedback;&#10;    }&#10;&#10;}&#10;&#10;&#10;public class EditorTest extends SwingTest&lt;TestClue&gt; {&#10;&#10;    public EditorTest() throws Exception {&#10;        super(new TextEditor());&#10;    }&#10;&#10;    private JTextComponentFixture textArea;&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Title is empty.&quot;,&#10;                () -&gt; frame.getTitle().length() &gt; 0)),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Window is not visible.&quot;,&#10;                () -&gt; frame.isVisible())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no text component with name TextArea.&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    textArea = window.textBox(&quot;TextArea&quot;);&#10;                    return textArea;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be editable.&quot;,&#10;                () -&gt; {&#10;                    textArea.requireEditable();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be empty at the start of the program.&quot;,&#10;                () -&gt; {&#10;                    textArea.requireEmpty();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Can't enter multiline text in TextArea.&quot;,&#10;                () -&gt; {&#10;                    String text = &quot;Basic text editor\nType here too\nHere also&quot;;&#10;                    textArea.setText(text);&#10;                    textArea.requireText(text);&#10;                    return true;&#10;                }))&#10;            );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;        try {&#10;            return new CheckResult(clue.function.get(), clue.feedback);&#10;        }&#10;        catch (AssertionError ex) {&#10;            return new CheckResult(false, clue.feedback);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage2" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you will write a program that can read files from the hard drive, edit them, and save them to the same or any other file.&lt;/p&gt;&#10;&#10;&lt;p&gt;Notice that if you expand the window, the other elements stay in the same place. But in most applications, you can see that some components get bigger or smaller when you resize the window. To do this, you should apply another layout instead of the null layout that was shown in the first stage.&lt;/p&gt;&#10;&#10;&lt;p&gt;In Java, there are a lot of different layouts, and the default layout is named &lt;code&gt;BorderLayout&lt;/code&gt;. This layout has 5 places to put components: top, bottom, left, right and center. If you execute the code below you can see where these places are. Do not forget to remove &lt;code&gt;setLayout(null)&lt;/code&gt; line and add nothing - &lt;code&gt;BorderLayout&lt;/code&gt; is a standard layout for &lt;code&gt;JFrame&lt;/code&gt;. &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Here&lt;/a&gt; you can see a visual representation of different layouts.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;add(new JButton(&quot;North&quot;), BorderLayout.NORTH);&#10;add(new JButton(&quot;South&quot;), BorderLayout.SOUTH);&#10;add(new JButton(&quot;West&quot;), BorderLayout.WEST);&#10;add(new JButton(&quot;East&quot;), BorderLayout.EAST);&#10;add(new JButton(&quot;Center&quot;), BorderLayout.CENTER);&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;So this layout can contain only 5 components, but is this enough to create more complex programs? Yes, and actually this layout is used widely when developing programs on Swing. The component &lt;code&gt;JPanel&lt;/code&gt; can contain other components. The default layout for this is &lt;code&gt;FlowLayout;&lt;/code&gt; it puts components on the screen from left to right and from top to bottom. You just add a &lt;code&gt;JPanel&lt;/code&gt; component to the frame with &lt;code&gt;BorderLayout&lt;/code&gt; and then add several components to this &lt;code&gt;JPanel&lt;/code&gt; with &lt;code&gt;FlowLayout&lt;/code&gt;!  You can find out more about &lt;code&gt;BorderLayout&lt;/code&gt; &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/layout/border.html&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://hajsoftutorial.com/borderlayout/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;. You can look &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/layout/flow.html&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; to see how to use FlowLayout.&lt;/p&gt;&#10;&#10;&lt;p&gt;Did you notice that if you typed more text than the size of the component (in our case, in &lt;code&gt;JTextArea&lt;/code&gt;), then the text is just not visible? This is the problem that can happen with any component. To solve this problem, this component should be wrapped by another component - &lt;code&gt;JScrollPane&lt;/code&gt;. This class takes the initial component as a parameter and should be added to the &lt;code&gt;JFrame&lt;/code&gt; instead of it. Also, all manipulations with size and location should proceed with this wrapper. As a result, the component can be scrolled horizontally as well as vertically. &lt;a href=&quot;https://www.javatpoint.com/java-jscrollpane&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Here&lt;/a&gt; and &lt;a href=&quot;https://way2java.com/swing/jscrollpane/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; you can see how to use JScrollPane.&lt;/p&gt;&#10;&#10;&lt;p&gt;Now, let's add working with files. To load a file from a hard drive, the user should specify the name of the existing file. If you run this from an IDE, this file should be in the same folder where the &quot;src&quot; folder is. Then, after the user presses the &quot;Load&quot; button, the content of the file should be displayed in the text field. After editing, you should be able to save the file. To do it, you need to specify a name for the file and then press the button &quot;Save&quot;.&lt;/p&gt;&#10;&#10;&lt;p&gt;To create a one-line input field for the name of the file you need a component &lt;code&gt;JTextField&lt;/code&gt;. To get the input text from that field, you need &lt;code&gt;getText&lt;/code&gt; method.&lt;/p&gt;&#10;&#10;&lt;p&gt;To create buttons, you need &lt;code&gt;JButton&lt;/code&gt;. Now, you need to interact with buttons. You need to execute some of your code when you click on a button. To perform this action, you need &lt;code&gt;ActionListener&lt;/code&gt;. Since &lt;code&gt;ActionListener&lt;/code&gt; is an interface, you need to implement the method &lt;code&gt;actionPerformed&lt;/code&gt; in a class that implements this interface. This would be your code when the user presses the button. Note, that for different buttons you need different logic, so you need different classes that implement an interface &lt;code&gt;ActionListener&lt;/code&gt;. After that, you need to bind each class with each button. The method &lt;code&gt;button.addActionListener(ActionListener listener)&lt;/code&gt; makes this possible. This method takes an object of a class that implements &lt;code&gt;ActionListener&lt;/code&gt;. After that, all should be fine. Pressing the button triggers the &lt;code&gt;actionPerformed&lt;/code&gt; method of that object.&lt;/p&gt;&#10;&#10;&lt;p&gt;If you are familiar with lambdas, you can use them instead of creating classes that be used only once. You can implement them as shown in the following template:  &lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;JButton button = new JButton();&#10;button.addActionListener(actionEvent -&amp;gt; {&#10;/* write your code here */&#10;});&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;During the programming of this stage, you may want to slightly tweak the sizes of the components. You can do it in two ways: the first is to create an invisible border around it (&lt;a href=&quot;http://www.java2s.com/example/java/swing/set-jcomponent-margin.html&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this &lt;/a&gt;link will help), and the second is to force the component to be a certain size (&lt;a href=&quot;http://www.java2s.com/example/java/swing/force-jcomponent-size.html&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt; link).&lt;/p&gt;&#10;&#10;&lt;p&gt;Due to testing reasons, you need to set name to some components.&lt;/p&gt;&#10;&#10;&lt;p&gt;Set the names to these components:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;  &lt;li&gt;JTextArea component to &quot;TextArea&quot;&lt;/li&gt;&#10;  &lt;li&gt;Field which contains filename to &quot;FilenameField&quot;&lt;/li&gt;&#10;  &lt;li&gt;Button that saves the file to &quot;SaveButton&quot;&lt;/li&gt;&#10;  &lt;li&gt;Button that loads a file to &quot;LoadButton&quot;&lt;/li&gt;&#10;  &lt;li&gt;ScrollPane to &quot;ScrollPane&quot;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an example of how your text editor might look.&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/df773afa-ad5e-4fc3-b1e3-60f505dff53c/&quot;&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/38/stages/202/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5259" />
                      <option name="index" value="2" />
                      <option name="name" value="Saved and loaded" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/EditorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/EditorTest.java" />
                                <option name="text" value="import editor.TextEditor;&#10;import org.assertj.swing.fixture.JButtonFixture;&#10;import org.assertj.swing.fixture.JScrollPaneFixture;&#10;import org.assertj.swing.fixture.JTextComponentFixture;&#10;import org.hyperskill.hstest.v6.stage.SwingTest;&#10;import org.hyperskill.hstest.v6.testcase.CheckResult;&#10;import org.hyperskill.hstest.v6.testcase.TestCase;&#10;import org.junit.After;&#10;&#10;import java.io.IOException;&#10;import java.nio.file.Files;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;import java.util.function.Supplier;&#10;&#10;&#10;class TestClue {&#10;&#10;    public Supplier&lt;Boolean&gt; function;&#10;    public String feedback;&#10;&#10;    public TestClue(String feedback, Supplier&lt;Boolean&gt; function) {&#10;        this.function = function;&#10;        this.feedback = feedback;&#10;    }&#10;&#10;}&#10;&#10;&#10;public class EditorTest extends SwingTest&lt;TestClue&gt; {&#10;&#10;    public EditorTest() throws Exception {&#10;        super(new TextEditor());&#10;    }&#10;&#10;    private JTextComponentFixture textArea;&#10;    private JTextComponentFixture filenameField;&#10;    private JButtonFixture saveButton;&#10;    private JButtonFixture loadButton;&#10;    private JScrollPaneFixture scrollPane;&#10;&#10;    String filename1 = &quot;SomeFile.txt&quot;;&#10;    String filename2 = &quot;AnotherFile.txt&quot;;&#10;    String noExistFile = &quot;FileDoesNotExist&quot;;&#10;&#10;    String textToSave1 = &quot;Basic text editor\nType here too\nHere also\n\n&quot;;&#10;    String textToSave2 = &quot;                Sonnet I\n&quot; +&#10;        &quot;     \n&quot; +&#10;        &quot;     \n&quot; +&#10;        &quot;FROM fairest creatures we desire increase,\n&quot; +&#10;        &quot;That thereby beauty's rose might never die,\n&quot; +&#10;        &quot;But as the riper should by time decease,\n&quot; +&#10;        &quot;His tender heir might bear his memory:\n&quot; +&#10;        &quot;But thou, contracted to thine own bright eyes,\n&quot; +&#10;        &quot;Feed'st thy light'st flame with self-substantial fuel,\n&quot; +&#10;        &quot;Making a famine where abundance lies,\n&quot; +&#10;        &quot;Thyself thy foe, to thy sweet self too cruel.\n&quot; +&#10;        &quot;Thou that art now the world's fresh ornament\n&quot; +&#10;        &quot;And only herald to the gaudy spring,\n&quot; +&#10;        &quot;Within thine own bud buriest thy content\n&quot; +&#10;        &quot;And, tender churl, makest waste in niggarding.\n&quot; +&#10;        &quot;Pity the world, or else this glutton be,\n&quot; +&#10;        &quot;To eat the world's due, by the grave and thee.\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;                 Sonnet II                   \n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;When forty winters shall beseige thy brow,\n&quot; +&#10;        &quot;And dig deep trenches in thy beauty's field,\n&quot; +&#10;        &quot;Thy youth's proud livery, so gazed on now,\n&quot; +&#10;        &quot;Will be a tatter'd weed, of small worth held:\n&quot; +&#10;        &quot;Then being ask'd where all thy beauty lies,\n&quot; +&#10;        &quot;Where all the treasure of thy lusty days,\n&quot; +&#10;        &quot;To say, within thine own deep-sunken eyes,\n&quot; +&#10;        &quot;Were an all-eating shame and thriftless praise.\n&quot; +&#10;        &quot;How much more praise deserved thy beauty's use,\n&quot; +&#10;        &quot;If thou couldst answer 'This fair child of mine\n&quot; +&#10;        &quot;Shall sum my count and make my old excuse,'\n&quot; +&#10;        &quot;Proving his beauty by succession thine!\n&quot; +&#10;        &quot;This were to be new made when thou art old,\n&quot; +&#10;        &quot;And see thy blood warm when thou feel'st it cold.&quot;;&#10;&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generate() {&#10;        return List.of(&#10;&#10;            // general tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Title is empty&quot;,&#10;                () -&gt; frame.getTitle().length() &gt; 0)),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Window is not visible&quot;,&#10;                () -&gt; frame.isVisible())),&#10;&#10;&#10;            // existence tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no text component with name TextArea&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    textArea = window.textBox(&quot;TextArea&quot;);&#10;                    return textArea;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no text component with name FilenameField&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    filenameField = window.textBox(&quot;FilenameField&quot;);&#10;                    return filenameField;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no button with name SaveButton&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    saveButton = window.button(&quot;SaveButton&quot;);&#10;                    return saveButton;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no button with name LoadButton&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    loadButton = window.button(&quot;LoadButton&quot;);&#10;                    return loadButton;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no scroll component with name ScrollPane&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    scrollPane = window.scrollPane(&quot;ScrollPane&quot;);&#10;                    return scrollPane;&#10;                }))),&#10;&#10;&#10;            // logic tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be editable&quot;,&#10;                () -&gt; {&#10;                    textArea.requireEditable();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be empty at the start of the program&quot;,&#10;                () -&gt; {&#10;                    textArea.requireEmpty();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;FilenameField should be empty at the start of the program&quot;,&#10;                () -&gt; {&#10;                    filenameField.requireEmpty();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;SaveButton should be enabled for clicking&quot;,&#10;                () -&gt; saveButton.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;LoadButton should be enabled for clicking&quot;,&#10;                () -&gt; loadButton.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Can't enter multiline text in TextArea.&quot;,&#10;                () -&gt; {&#10;                    textArea.setText(textToSave1);&#10;                    textArea.requireText(textToSave1);&#10;                    textArea.setText(&quot;&quot;);&#10;                    textArea.setText(textToSave2);&#10;                    textArea.requireText(textToSave2);&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Can enter multiline text in FilenameField, but shouldn't&quot;,&#10;                () -&gt; {&#10;                    String text = textToSave1;&#10;                    filenameField.setText(text);&#10;                    filenameField.requireText(text.replace(&quot;\n&quot;, &quot; &quot;));&#10;                    filenameField.setText(&quot;&quot;);&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text in FilenameField and in TextArea &quot; +&#10;                    &quot;should stay the same after saving file&quot;,&#10;                () -&gt; {&#10;                    filenameField.setText(filename1);&#10;                    textArea.setText(textToSave1);&#10;&#10;                    saveButton.click();&#10;&#10;                    filenameField.requireText(filename1);&#10;                    textArea.requireText(textToSave1);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text in FilenameField and in TextArea &quot; +&#10;                    &quot;should stay the same after saving file&quot;,&#10;                () -&gt; {&#10;                    String text = textToSave2;&#10;                    String file = filename2;&#10;&#10;                    filenameField.setText(file);&#10;                    textArea.setText(text);&#10;&#10;                    saveButton.click();&#10;&#10;                    filenameField.requireText(file);&#10;                    textArea.requireText(text);&#10;&#10;                    filenameField.setText(&quot;&quot;);&#10;                    textArea.setText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text in FilenameField stay the same after loading file&quot;,&#10;                () -&gt; {&#10;                    String file = filename1;&#10;&#10;                    filenameField.setText(file);&#10;                    textArea.setText(&quot;&quot;);&#10;&#10;                    loadButton.click();&#10;&#10;                    filenameField.requireText(file);&#10;&#10;                    filenameField.setText(&quot;&quot;);&#10;                    textArea.setText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text should be the same after saving and loading same file&quot;,&#10;                () -&gt; {&#10;                    String[] texts = {textToSave2, textToSave1};&#10;                    String[] files = {filename1, filename2};&#10;&#10;                    for (int i = 0; i &lt; 2; i++) {&#10;&#10;                        String text = texts[i];&#10;                        String file = files[i];&#10;&#10;                        filenameField.setText(&quot;&quot;);&#10;                        textArea.setText(&quot;&quot;);&#10;&#10;                        filenameField.setText(file);&#10;                        textArea.setText(text);&#10;&#10;                        saveButton.click();&#10;&#10;                        filenameField.setText(&quot;&quot;);&#10;                        textArea.setText(&quot;&quot;);&#10;&#10;                        filenameField.setText(file);&#10;                        loadButton.click();&#10;&#10;                        textArea.requireText(text);&#10;                    }&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be empty if user tries to &quot; +&#10;                    &quot;load file that doesn't exist&quot;,&#10;                () -&gt; {&#10;&#10;                    textArea.setText(textToSave1);&#10;                    filenameField.setText(noExistFile);&#10;&#10;                    loadButton.click();&#10;                    textArea.requireText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should correctly save and load an empty file&quot;,&#10;                () -&gt; {&#10;                    textArea.setText(&quot;&quot;);&#10;                    filenameField.setText(filename1);&#10;&#10;                    saveButton.click();&#10;                    textArea.setText(textToSave2);&#10;                    loadButton.click();&#10;                    textArea.requireText(&quot;&quot;);&#10;&#10;                    return true;&#10;                }))&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;        try {&#10;            return new CheckResult(clue.function.get(), clue.feedback);&#10;        }&#10;        catch (AssertionError ex) {&#10;            return new CheckResult(false, clue.feedback);&#10;        }&#10;    }&#10;&#10;    @After&#10;    public void deleteFiles() {&#10;        try {&#10;            Files.delete(Paths.get(filename1));&#10;            Files.delete(Paths.get(filename2));&#10;        }&#10;        catch (IOException ex) {&#10;            ex.printStackTrace();&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/editor/TextEditor.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/editor/TextEditor.java" />
                                <option name="text" value="package editor;&#10;&#10;import javax.swing.*;&#10;&#10;public class TextEditor extends JFrame {&#10;    public TextEditor() {&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setSize(300, 300);&#10;        setTitle(&quot;Text editor&quot;);&#10;        JTextArea textArea = new JTextArea();&#10;        textArea.setName(&quot;TextArea&quot;);&#10;        add(textArea);&#10;&#10;        setVisible(true);&#10;        setLayout(null);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/editor/ApplicationRunner.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/editor/ApplicationRunner.java" />
                                <option name="text" value="package editor;&#10;&#10;&#10;public class ApplicationRunner {&#10;    public static void main(String[] args) {&#10;        new TextEditor();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage3" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you will improve your text editor.&lt;/p&gt;&#10;&#10;&lt;p&gt;Also, in this stage, you should implement a menu bar. It is the GUI element that sits in the top left corner of the screen and pops up with different options when you click on it. This should be implemented using &lt;code&gt;JMenuBar&lt;/code&gt;, whose menu lists are implemented using &lt;code&gt;JMenu&lt;/code&gt; and whose menu items are implemented using &lt;code&gt;JMenuItem&lt;/code&gt;. You should add an &lt;code&gt;ActionListener&lt;/code&gt; to every &lt;code&gt;JMenuItem&lt;/code&gt; in the menu bar. The menu bar should contain three options: Load, Save and Exit, which duplicate the buttons Load, Save, and the &quot;Exit&quot; option which should shut down the application. To safely close the window, you should call a method &lt;code&gt;dispose()&lt;/code&gt; on the &lt;code&gt;JFrame&lt;/code&gt;. You may look at &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/components/menu.html&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt; tutorial to create a menu bar.&lt;/p&gt;&#10;&#10;&lt;p&gt;Due to testing reasons, you need to set name to some components.&lt;/p&gt;&#10;&#10;&lt;p&gt;Set the names to these components:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;JTextArea component to &quot;TextArea&quot;&lt;/li&gt;&#10;&#9;&lt;li&gt;Field which contains filename to &quot;FilenameField&quot;&lt;/li&gt;&#10;&#9;&lt;li&gt;Button that saves the file to &quot;SaveButton&quot;&lt;/li&gt;&#10;&#9;&lt;li&gt;Button that loads a file to &quot;LoadButton&quot;&lt;/li&gt;&#10;&#9;&lt;li&gt;ScrollPane to &quot;ScrollPane&quot;&lt;/li&gt;&#10;&#9;&lt;li&gt;JMenu &quot;File&quot; to &quot;MenuFile&quot;&lt;/li&gt;&#10;&#9;&lt;li&gt;JMenuItem &quot;Load&quot; option in menu to &quot;MenuLoad&quot;&lt;/li&gt;&#10;&#9;&lt;li&gt;JMenuItem &quot;Save&quot; option in menu to &quot;MenuSave&quot;&lt;/li&gt;&#10;&#9;&lt;li&gt;JMenuItem &quot;Exit&quot; option in menu to &quot;MenuExit&quot;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is the example of how your text editor might look.&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;288&quot; src=&quot;https://ucarecdn.com/35e01eba-4ea0-4ce8-99c9-61989ee715eb/&quot; width=&quot;566&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/9f690524-4937-4eed-878b-0e62b2b7dacf/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/6e554a94-129c-47ee-ad33-ecfdac91a27a/&quot;&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/38/stages/203/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5260" />
                      <option name="index" value="3" />
                      <option name="name" value="Menu, please!" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/EditorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/EditorTest.java" />
                                <option name="text" value="import editor.TextEditor;&#10;import org.assertj.swing.fixture.JButtonFixture;&#10;import org.assertj.swing.fixture.JMenuItemFixture;&#10;import org.assertj.swing.fixture.JScrollPaneFixture;&#10;import org.assertj.swing.fixture.JTextComponentFixture;&#10;import org.hyperskill.hstest.v6.stage.SwingTest;&#10;import org.hyperskill.hstest.v6.testcase.CheckResult;&#10;import org.hyperskill.hstest.v6.testcase.TestCase;&#10;import org.junit.After;&#10;&#10;import java.io.IOException;&#10;import java.nio.file.Files;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;import java.util.function.Supplier;&#10;&#10;&#10;class TestClue {&#10;&#10;    public Supplier&lt;Boolean&gt; function;&#10;    public String feedback;&#10;&#10;    public TestClue(String feedback, Supplier&lt;Boolean&gt; function) {&#10;        this.function = function;&#10;        this.feedback = feedback;&#10;    }&#10;&#10;}&#10;&#10;&#10;public class EditorTest extends SwingTest&lt;TestClue&gt; {&#10;&#10;    public EditorTest() throws Exception {&#10;        super(new TextEditor());&#10;    }&#10;&#10;    private JTextComponentFixture textArea;&#10;    private JTextComponentFixture filenameField;&#10;    private JButtonFixture saveButton;&#10;    private JButtonFixture loadButton;&#10;    private JScrollPaneFixture scrollPane;&#10;    private JMenuItemFixture menuFile;&#10;    private JMenuItemFixture menuLoad;&#10;    private JMenuItemFixture menuSave;&#10;    private JMenuItemFixture menuExit;&#10;&#10;    String filename1 = &quot;SomeFile.txt&quot;;&#10;    String filename2 = &quot;AnotherFile.txt&quot;;&#10;    String noExistFile = &quot;FileDoesNotExist&quot;;&#10;&#10;    String textToSave1 = &quot;Basic text editor\nType here too\nHere also\n\n&quot;;&#10;    String textToSave2 = &quot;                Sonnet I\n&quot; +&#10;        &quot;     \n&quot; +&#10;        &quot;     \n&quot; +&#10;        &quot;FROM fairest creatures we desire increase,\n&quot; +&#10;        &quot;That thereby beauty's rose might never die,\n&quot; +&#10;        &quot;But as the riper should by time decease,\n&quot; +&#10;        &quot;His tender heir might bear his memory:\n&quot; +&#10;        &quot;But thou, contracted to thine own bright eyes,\n&quot; +&#10;        &quot;Feed'st thy light'st flame with self-substantial fuel,\n&quot; +&#10;        &quot;Making a famine where abundance lies,\n&quot; +&#10;        &quot;Thyself thy foe, to thy sweet self too cruel.\n&quot; +&#10;        &quot;Thou that art now the world's fresh ornament\n&quot; +&#10;        &quot;And only herald to the gaudy spring,\n&quot; +&#10;        &quot;Within thine own bud buriest thy content\n&quot; +&#10;        &quot;And, tender churl, makest waste in niggarding.\n&quot; +&#10;        &quot;Pity the world, or else this glutton be,\n&quot; +&#10;        &quot;To eat the world's due, by the grave and thee.\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;                 Sonnet II                   \n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;When forty winters shall beseige thy brow,\n&quot; +&#10;        &quot;And dig deep trenches in thy beauty's field,\n&quot; +&#10;        &quot;Thy youth's proud livery, so gazed on now,\n&quot; +&#10;        &quot;Will be a tatter'd weed, of small worth held:\n&quot; +&#10;        &quot;Then being ask'd where all thy beauty lies,\n&quot; +&#10;        &quot;Where all the treasure of thy lusty days,\n&quot; +&#10;        &quot;To say, within thine own deep-sunken eyes,\n&quot; +&#10;        &quot;Were an all-eating shame and thriftless praise.\n&quot; +&#10;        &quot;How much more praise deserved thy beauty's use,\n&quot; +&#10;        &quot;If thou couldst answer 'This fair child of mine\n&quot; +&#10;        &quot;Shall sum my count and make my old excuse,'\n&quot; +&#10;        &quot;Proving his beauty by succession thine!\n&quot; +&#10;        &quot;This were to be new made when thou art old,\n&quot; +&#10;        &quot;And see thy blood warm when thou feel'st it cold.&quot;;&#10;&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generate() {&#10;        return List.of(&#10;&#10;            // general tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Title is empty&quot;,&#10;                () -&gt; frame.getTitle().length() &gt; 0)),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Window is not visible&quot;,&#10;                () -&gt; frame.isVisible())),&#10;&#10;&#10;            // existence tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no text component with name TextArea&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    textArea = window.textBox(&quot;TextArea&quot;);&#10;                    return textArea;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no text component with name FilenameField&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    filenameField = window.textBox(&quot;FilenameField&quot;);&#10;                    return filenameField;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no button with name SaveButton&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    saveButton = window.button(&quot;SaveButton&quot;);&#10;                    return saveButton;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no button with name LoadButton&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    loadButton = window.button(&quot;LoadButton&quot;);&#10;                    return loadButton;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no scroll component with name ScrollPane&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    scrollPane = window.scrollPane(&quot;ScrollPane&quot;);&#10;                    return scrollPane;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuFile&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuFile = window.menuItem(&quot;MenuFile&quot;);&#10;                    return menuFile;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuLoad&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuLoad = window.menuItem(&quot;MenuLoad&quot;);&#10;                    return menuLoad;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuSave&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuSave = window.menuItem(&quot;MenuSave&quot;);&#10;                    return menuSave;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuExit&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuExit = window.menuItem(&quot;MenuExit&quot;);&#10;                    return menuExit;&#10;                }))),&#10;&#10;&#10;&#10;            // logic tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be editable&quot;,&#10;                () -&gt; {&#10;                    textArea.requireEditable();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be empty at the start of the program&quot;,&#10;                () -&gt; {&#10;                    textArea.requireEmpty();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;FilenameField should be empty at the start of the program&quot;,&#10;                () -&gt; {&#10;                    filenameField.requireEmpty();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;SaveButton should be enabled for clicking&quot;,&#10;                () -&gt; saveButton.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;LoadButton should be enabled for clicking&quot;,&#10;                () -&gt; loadButton.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Can't enter multiline text in TextArea.&quot;,&#10;                () -&gt; {&#10;                    textArea.setText(textToSave1);&#10;                    textArea.requireText(textToSave1);&#10;                    textArea.setText(&quot;&quot;);&#10;                    textArea.setText(textToSave2);&#10;                    textArea.requireText(textToSave2);&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Can enter multiline text in FilenameField, but shouldn't&quot;,&#10;                () -&gt; {&#10;                    String text = textToSave1;&#10;                    filenameField.setText(text);&#10;                    filenameField.requireText(text.replace(&quot;\n&quot;, &quot; &quot;));&#10;                    filenameField.setText(&quot;&quot;);&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text in FilenameField and in TextArea &quot; +&#10;                    &quot;should stay the same after saving file&quot;,&#10;                () -&gt; {&#10;                    filenameField.setText(filename1);&#10;                    textArea.setText(textToSave1);&#10;&#10;                    saveButton.click();&#10;&#10;                    filenameField.requireText(filename1);&#10;                    textArea.requireText(textToSave1);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text in FilenameField and in TextArea &quot; +&#10;                    &quot;should stay the same after saving file&quot;,&#10;                () -&gt; {&#10;                    String text = textToSave2;&#10;                    String file = filename2;&#10;&#10;                    filenameField.setText(file);&#10;                    textArea.setText(text);&#10;&#10;                    saveButton.click();&#10;&#10;                    filenameField.requireText(file);&#10;                    textArea.requireText(text);&#10;&#10;                    filenameField.setText(&quot;&quot;);&#10;                    textArea.setText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text in FilenameField stay the same after loading file&quot;,&#10;                () -&gt; {&#10;                    String file = filename1;&#10;&#10;                    filenameField.setText(file);&#10;                    textArea.setText(&quot;&quot;);&#10;&#10;                    loadButton.click();&#10;&#10;                    filenameField.requireText(file);&#10;&#10;                    filenameField.setText(&quot;&quot;);&#10;                    textArea.setText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text should be the same after saving and loading same file&quot;,&#10;                () -&gt; {&#10;                    String[] texts = {textToSave2, textToSave1};&#10;                    String[] files = {filename1, filename2};&#10;&#10;                    for (int i = 0; i &lt; 2; i++) {&#10;&#10;                        String text = texts[i];&#10;                        String file = files[i];&#10;&#10;                        filenameField.setText(&quot;&quot;);&#10;                        textArea.setText(&quot;&quot;);&#10;&#10;                        filenameField.setText(file);&#10;                        textArea.setText(text);&#10;&#10;                        saveButton.click();&#10;&#10;                        filenameField.setText(&quot;&quot;);&#10;                        textArea.setText(&quot;&quot;);&#10;&#10;                        filenameField.setText(file);&#10;                        loadButton.click();&#10;&#10;                        textArea.requireText(text);&#10;                    }&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be empty if user tries to &quot; +&#10;                    &quot;load file that doesn't exist&quot;,&#10;                () -&gt; {&#10;&#10;                    textArea.setText(textToSave1);&#10;                    filenameField.setText(noExistFile);&#10;&#10;                    loadButton.click();&#10;                    textArea.requireText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should correctly save and load an empty file&quot;,&#10;                () -&gt; {&#10;                    textArea.setText(&quot;&quot;);&#10;                    filenameField.setText(filename1);&#10;&#10;                    saveButton.click();&#10;                    textArea.setText(textToSave2);&#10;                    loadButton.click();&#10;                    textArea.requireText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;&#10;&#10;            // menu-related tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuLoad should be enabled for clicking&quot;,&#10;                () -&gt; {&#10;                    menuLoad.requireEnabled();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuSave should be enabled for clicking&quot;,&#10;                () -&gt; {&#10;                    menuSave.requireEnabled();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuFile should be enabled for clicking&quot;,&#10;                () -&gt; {&#10;                    menuFile.requireEnabled();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuExit should be enabled for clicking&quot;,&#10;                () -&gt; {&#10;                    menuExit.requireEnabled();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text in FilenameField and in TextArea &quot; +&#10;                    &quot;should stay the same after saving file using MenuSave&quot;,&#10;                () -&gt; {&#10;                    filenameField.setText(filename1);&#10;                    textArea.setText(textToSave1);&#10;&#10;                    menuSave.click();&#10;&#10;                    filenameField.requireText(filename1);&#10;                    textArea.requireText(textToSave1);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text in FilenameField and in TextArea &quot; +&#10;                    &quot;should stay the same after saving file using MenuSave&quot;,&#10;                () -&gt; {&#10;                    String text = textToSave2;&#10;                    String file = filename2;&#10;&#10;                    filenameField.setText(file);&#10;                    textArea.setText(text);&#10;&#10;                    menuSave.click();&#10;&#10;                    filenameField.requireText(file);&#10;                    textArea.requireText(text);&#10;&#10;                    filenameField.setText(&quot;&quot;);&#10;                    textArea.setText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text in FilenameField stay &quot; +&#10;                    &quot;the same after loading file using MenuLoad&quot;,&#10;                () -&gt; {&#10;                    String file = filename1;&#10;&#10;                    filenameField.setText(file);&#10;                    textArea.setText(&quot;&quot;);&#10;&#10;                    menuLoad.click();&#10;&#10;                    filenameField.requireText(file);&#10;&#10;                    filenameField.setText(&quot;&quot;);&#10;                    textArea.setText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text should be the same after saving &quot; +&#10;                    &quot;and loading same file using MenuLoad&quot;,&#10;                () -&gt; {&#10;                    String[] texts = {textToSave2, textToSave1};&#10;                    String[] files = {filename1, filename2};&#10;&#10;                    for (int i = 0; i &lt; 2; i++) {&#10;&#10;                        String text = texts[i];&#10;                        String file = files[i];&#10;&#10;                        filenameField.setText(&quot;&quot;);&#10;                        textArea.setText(&quot;&quot;);&#10;&#10;                        filenameField.setText(file);&#10;                        textArea.setText(text);&#10;&#10;                        menuSave.click();&#10;&#10;                        filenameField.setText(&quot;&quot;);&#10;                        textArea.setText(&quot;&quot;);&#10;&#10;                        filenameField.setText(file);&#10;                        menuLoad.click();&#10;&#10;                        textArea.requireText(text);&#10;                    }&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be empty if user tries to &quot; +&#10;                    &quot;load file that doesn't exist using MenuLoad&quot;,&#10;                () -&gt; {&#10;&#10;                    textArea.setText(textToSave1);&#10;                    filenameField.setText(noExistFile);&#10;&#10;                    menuLoad.click();&#10;                    textArea.requireText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should correctly save and load an empty file using menu&quot;,&#10;                () -&gt; {&#10;                    textArea.setText(&quot;&quot;);&#10;                    filenameField.setText(filename1);&#10;&#10;                    menuSave.click();&#10;                    textArea.setText(textToSave2);&#10;                    menuLoad.click();&#10;                    textArea.requireText(&quot;&quot;);&#10;                    return true;&#10;                }))&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;        try {&#10;            return new CheckResult(clue.function.get(), clue.feedback);&#10;        }&#10;        catch (AssertionError ex) {&#10;            return new CheckResult(false, clue.feedback);&#10;        }&#10;    }&#10;&#10;    @After&#10;    public void deleteFiles() {&#10;        try {&#10;            Files.delete(Paths.get(filename1));&#10;            Files.delete(Paths.get(filename2));&#10;        }&#10;        catch (IOException ex) {&#10;            ex.printStackTrace();&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/editor/TextEditor.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/editor/TextEditor.java" />
                                <option name="text" value="package editor;&#10;&#10;&#10;import javax.swing.*;&#10;import javax.swing.border.EmptyBorder;&#10;import java.io.FileWriter;&#10;import java.io.IOException;&#10;import java.nio.file.Files;&#10;import java.nio.file.Paths;&#10;&#10;public class TextEditor extends JFrame {&#10;    public TextEditor() {&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setBounds(700, 300, 450, 300);&#10;//        setSize(500, 500);&#10;        setTitle(&quot;Text editor&quot;);&#10;&#10;        JPanel contentPane = new JPanel();&#10;        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));&#10;        setContentPane(contentPane);&#10;&#10;        JTextField textField= new JTextField();&#10;        textField.setName(&quot;FilenameField&quot;);&#10;&#10;        JButton btnSave = new JButton(&quot;Save&quot;);&#10;        btnSave.setName(&quot;SaveButton&quot;);&#10;&#10;        JButton btnLoad = new JButton(&quot;Load&quot;);&#10;        btnLoad.setName(&quot;LoadButton&quot;);&#10;&#10;        JTextArea textArea = new JTextArea();&#10;        textArea.setName(&quot;TextArea&quot;);&#10;        JScrollPane scrollableTextArea = new JScrollPane(textArea);&#10;        scrollableTextArea.setName(&quot;ScrollPane&quot;);&#10;        scrollableTextArea.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);&#10;        scrollableTextArea.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);&#10;&#10;&#10;        GroupLayout gl_contentPane = new GroupLayout(contentPane);&#10;        gl_contentPane.setHorizontalGroup(&#10;                gl_contentPane.createParallelGroup(GroupLayout.Alignment.LEADING)&#10;                        .addGroup(gl_contentPane.createSequentialGroup()&#10;                                .addGap(5)&#10;                                .addGroup(gl_contentPane.createParallelGroup(GroupLayout.Alignment.LEADING)&#10;                                        .addGroup(gl_contentPane.createSequentialGroup()&#10;                                                .addComponent(textField, GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)&#10;                                                .addGap(10)&#10;                                                .addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 89, GroupLayout.PREFERRED_SIZE)&#10;                                                .addGap(10)&#10;                                                .addComponent(btnLoad, GroupLayout.PREFERRED_SIZE, 89, GroupLayout.PREFERRED_SIZE))&#10;                                        .addComponent(scrollableTextArea, GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))&#10;                                .addGap(18))&#10;        );&#10;        gl_contentPane.setVerticalGroup(&#10;                gl_contentPane.createParallelGroup(GroupLayout.Alignment.LEADING)&#10;                        .addGroup(gl_contentPane.createSequentialGroup()&#10;                                .addGap(5)&#10;                                .addGroup(gl_contentPane.createParallelGroup(GroupLayout.Alignment.LEADING, false)&#10;                                        .addGroup(gl_contentPane.createSequentialGroup()&#10;                                                .addGap(1)&#10;                                                .addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)&#10;                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE))&#10;                                        .addComponent(btnSave)&#10;                                        .addComponent(btnLoad))&#10;                                .addGap(11)&#10;                                .addComponent(scrollableTextArea, GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)&#10;                                .addGap(4))&#10;        );&#10;&#10;        btnLoad.addActionListener(actionEvent -&gt; {&#10;            try{&#10;                textArea.setText(Files.readString(Paths.get(textField.getText())));&#10;            } catch (IOException e) {&#10;                textArea.setText(&quot;&quot;);&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;        btnSave.addActionListener(actionEvent -&gt; {&#10;            try(FileWriter fileWriter = new FileWriter(textField.getText())) {&#10;                fileWriter.write(textArea.getText());&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;        contentPane.setLayout(gl_contentPane);&#10;        setVisible(true);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/editor/ApplicationRunner.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/editor/ApplicationRunner.java" />
                                <option name="text" value="package editor;&#10;&#10;&#10;public class ApplicationRunner {&#10;    public static void main(String[] args) {&#10;        new TextEditor();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/editor/file">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/editor/file" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage4" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you will improve the usability of your text editor.&lt;/p&gt;&#10;&#10;&lt;p&gt;The first thing to point out is that the &quot;Save&quot; and &quot;Load&quot; buttons take up a lot of space on the screen. You can't add a lot of buttons to the top bar when they contain text. This problem can be solved using icons instead of text. The constructor of &lt;code&gt;JButton&lt;/code&gt; can take an &lt;code&gt;ImageIcon&lt;/code&gt; instead of text. You should replace the buttons &quot;Load&quot; and &quot;Save&quot; with corresponding icons. You can download the icons from the internet.&lt;/p&gt;&#10;&#10;&lt;p&gt;It is also not useful to allow users to load a file from only one directory — the project folder. The Swing library has a useful component for navigating your filesystem - &lt;code&gt;JFileChooser&lt;/code&gt;. So, when the user clicks on the &quot;Open&quot; button (is was the button that previously named &quot;Load&quot;) you should open a file manager using &lt;code&gt;JFileChooser&lt;/code&gt; and let the user choose the file he wants to open. Then, the contents of this file should be visible in the text editor. You can use &lt;a href=&quot;http://www.mkyong.com/swing/java-swing-jfilechooser-example/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt; link to see how to use &lt;code&gt;JFileChooser&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Also, you should add a search panel. It should contain a text field, a button &quot;Start search&quot;, a button &quot;Previous match&quot; and a button &quot;Next match.” All of these buttons should also be icons. The search can be by regular expressions or by plain text. For this, you should add a checkbox that is checked when the user wants to search using a regular expression. You can use &lt;code&gt;JCheckBox&lt;/code&gt; for this. The search can slow down the GUI thread, so you should implement the search in a separate thread.&lt;/p&gt;&#10;&#10;&lt;p&gt;After the user presses the &quot;Start search&quot; button, the program should select the first part of the text that is matched and set the caret to the end of the selected part. Use buttons &quot;Next match&quot; and &quot;Previous match&quot; to iterate through all matches in the text. You can use the following working code to set the caret position and select the text of the text area:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;textArea.setCaretPosition(index + foundText.length());&#10;textArea.select(index, index + foundText.length());&#10;textArea.grabFocus();&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Do not forget about the menu. You can add a new menu list with search functionality that copies all the search buttons.&lt;/p&gt;&#10;&#10;&lt;p&gt;Due to testing reasons, you need to set name to some components.&lt;/p&gt;&#10;&#10;&lt;p&gt;Set the names to these components:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;  &lt;li&gt;JTextArea component to &quot;TextArea&quot;&lt;/li&gt;&#10;  &lt;li&gt;Search field to &quot;SearchField&quot;&lt;/li&gt;&#10;  &lt;li&gt;Button that saves the file to &quot;SaveButton&quot;&lt;/li&gt;&#10;  &lt;li&gt;Button that opens a filemanager to &quot;OpenButton&quot;&lt;/li&gt;&#10;  &lt;li&gt;Start search button to &quot;StartSearchButton&quot;&lt;/li&gt;&#10;  &lt;li&gt;Previous match button to &quot;PreviousMatchButton&quot;&lt;/li&gt;&#10;  &lt;li&gt;Next match button to &quot;NextMatchButton&quot;&lt;/li&gt;&#10;  &lt;li&gt;Use regex checkbox to &quot;UseRegExCheckbox&quot;&lt;/li&gt;&#10;  &lt;li&gt;JFileChooser to &quot;FileChooser&quot;&lt;/li&gt;&#10;  &lt;li&gt;ScrollPane to &quot;ScrollPane&quot;&lt;/li&gt;&#10;  &lt;li&gt;File option in menu to &quot;MenuFile&quot;&lt;/li&gt;&#10;  &lt;li&gt;Search option in menu to &quot;MenuSearch&quot;&lt;/li&gt;&#10;  &lt;li&gt;Open option in menu to &quot;MenuOpen&quot;&lt;/li&gt;&#10;  &lt;li&gt;Save option in menu to &quot;MenuSave&quot;&lt;/li&gt;&#10;  &lt;li&gt;Exit option in menu to &quot;MenuExit&quot;&lt;/li&gt;&#10;  &lt;li&gt;Start search option in menu to &quot;MenuStartSearch&quot;&lt;/li&gt;&#10;  &lt;li&gt;Previous match option in menu to &quot;MenuPreviousMatch&quot;&lt;/li&gt;&#10;  &lt;li&gt;Next match option in menu to &quot;MenuNextMatch&quot;&lt;/li&gt;&#10;  &lt;li&gt;Use regex option in menu to &quot;MenuUseRegExp&quot;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;For the testing reasons, you should use a single instance of &lt;code&gt;JFileChooser&lt;/code&gt;. Add this instance to the frame using &lt;code&gt;add&lt;/code&gt; method. Hide this instance of JFileChooser if it isn't needed at the moment and show it when it needed.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an example of how your text editor might look.&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;433&quot; src=&quot;https://ucarecdn.com/c9a09e0a-a4bf-4b96-96d6-8180dfbda308/&quot; width=&quot;619&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/4fc28e91-c3e2-4ab2-a130-f589a79cc900/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/91ccfb04-98e3-4cc4-9a20-6ecae77f5682/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/e6a27c9a-4195-416c-96d8-c3da0d2f5ff9/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/959f414f-d7c7-44be-af07-630d224a5c36/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/908cdec4-2376-4c01-a8b8-e38c2cec3b33/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/05bd4f5c-e22b-453a-b31c-6641e24a7d1a/&quot;&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/38/stages/204/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5261" />
                      <option name="index" value="4" />
                      <option name="name" value="Searching" />
                      <option name="record" value="-1" />
                      <option name="status" value="Failed" />
                      <option name="files">
                        <map>
                          <entry key="test/EditorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/EditorTest.java" />
                                <option name="text" value="import editor.TextEditor;&#10;import org.assertj.swing.fixture.*;&#10;import org.hyperskill.hstest.v6.stage.SwingTest;&#10;import org.hyperskill.hstest.v6.testcase.CheckResult;&#10;import org.hyperskill.hstest.v6.testcase.TestCase;&#10;import org.junit.After;&#10;&#10;import java.io.File;&#10;import java.nio.file.Files;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;import java.util.function.Supplier;&#10;&#10;&#10;class TestClue {&#10;&#10;    public Supplier&lt;Boolean&gt; function;&#10;    public String feedback;&#10;&#10;    public TestClue(String feedback, Supplier&lt;Boolean&gt; function) {&#10;        this.function = function;&#10;        this.feedback = feedback;&#10;    }&#10;&#10;}&#10;&#10;&#10;public class EditorTest extends SwingTest&lt;TestClue&gt; {&#10;&#10;    public EditorTest() throws Exception {&#10;        super(new TextEditor());&#10;    }&#10;&#10;    private String dir = System.getProperty(&quot;user.dir&quot;) + File.separator;&#10;    private File fileDir = new File(dir);&#10;&#10;    private JTextComponentFixture textArea;&#10;    private JTextComponentFixture searchField;&#10;    private JButtonFixture saveButton;&#10;    private JButtonFixture openButton;&#10;    private JButtonFixture startSearchButton;&#10;    private JButtonFixture previousMatchButton;&#10;    private JButtonFixture nextMatchButton;&#10;    private JCheckBoxFixture useRegExCheckbox;&#10;    private JScrollPaneFixture scrollPane;&#10;    private JMenuItemFixture menuFile;&#10;    private JMenuItemFixture menuSearch;&#10;    private JMenuItemFixture menuOpen;&#10;    private JMenuItemFixture menuSave;&#10;    private JMenuItemFixture menuExit;&#10;    private JMenuItemFixture menuStartSearch;&#10;    private JMenuItemFixture menuPreviousMatch;&#10;    private JMenuItemFixture menuNextMatch;&#10;    private JMenuItemFixture menuUseRegExp;&#10;    private JFileChooserFixture fileChooser;&#10;&#10;    String filename1 = &quot;SomeFile.txt&quot;;&#10;    String filename2 = &quot;AnotherFile.txt&quot;;&#10;    String noExistFile = &quot;FileDoesNotExist&quot;;&#10;&#10;    String searchText = &quot;Sonnet&quot;;&#10;    String regExSearchText = &quot;[fr]uel&quot;;&#10;&#10;    String textToSave1 = &quot;Basic text editor\nType here too\nHere also\n\n&quot;;&#10;    String textToSave2 = &quot;          Sonnet I\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;FROM fairest creatures we desire increase,\n&quot; +&#10;        &quot;That thereby beauty's rose might never die,\n&quot; +&#10;        &quot;But as the riper should by time decease,\n&quot; +&#10;        &quot;His tender heir might bear his memory:\n&quot; +&#10;        &quot;But thou, contracted to thine own bright eyes,\n&quot; +&#10;        &quot;Feed'st thy light'st flame with self-substantial fuel,\n&quot; +&#10;        &quot;Making a famine where abundance lies,\n&quot; +&#10;        &quot;Thyself thy foe, to thy sweet self too cruel.\n&quot; +&#10;        &quot;Thou that art now the world's fresh ornament\n&quot; +&#10;        &quot;And only herald to the gaudy spring,\n&quot; +&#10;        &quot;Within thine own bud buriest thy content\n&quot; +&#10;        &quot;And, tender churl, makest waste in niggarding.\n&quot; +&#10;        &quot;Pity the world, or else this glutton be,\n&quot; +&#10;        &quot;To eat the world's due, by the grave and thee.\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot; Sonnet II\n&quot; +&#10;        &quot;       \n&quot; +&#10;        &quot;         \n&quot; +&#10;        &quot;When forty winters shall beseige thy brow,\n&quot; +&#10;        &quot;And dig deep trenches in thy beauty's field,\n&quot; +&#10;        &quot;Thy youth's proud livery, so gazed on now,\n&quot; +&#10;        &quot;Will be a tatter'd weed, of small worth held:\n&quot; +&#10;        &quot;Then being ask'd where all thy beauty lies,\n&quot; +&#10;        &quot;Where all the treasure of thy lusty days,\n&quot; +&#10;        &quot;To say, within thine own deep-sunken eyes,\n&quot; +&#10;        &quot;Were an all-eating shame and thriftless praise.\n&quot; +&#10;        &quot;How much more praise deserved thy beauty's use,\n&quot; +&#10;        &quot;If thou couldst answer 'This fair child of mine\n&quot; +&#10;        &quot;Shall sum my count and make my old excuse,'\n&quot; +&#10;        &quot;Proving his beauty by succession thine!\n&quot; +&#10;        &quot;This were to be new made when thou art old,\n&quot; +&#10;        &quot;And see thy blood warm when thou feel'st it cold.\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;Sonnet III\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;Look in thy glass, and tell the face thou viewest\n&quot; +&#10;        &quot;Now is the time that face should form another;\n&quot; +&#10;        &quot;Whose fresh repair if now thou not renewest,\n&quot; +&#10;        &quot;Thou dost beguile the world, unbless some mother.\n&quot; +&#10;        &quot;For where is she so fair whose unear'd womb\n&quot; +&#10;        &quot;Disdains the tillage of thy husbandry?\n&quot; +&#10;        &quot;Or who is he so fond will be the tomb\n&quot; +&#10;        &quot;Of his self-love, to stop posterity?\n&quot; +&#10;        &quot;Thou art thy mother's glass, and she in thee\n&quot; +&#10;        &quot;Calls back the lovely April of her prime:\n&quot; +&#10;        &quot;So thou through windows of thine age shall see\n&quot; +&#10;        &quot;Despite of wrinkles this thy golden time.\n&quot; +&#10;        &quot;But if thou live, remember'd not to be,\n&quot; +&#10;        &quot;Die single, and thine image dies with thee.\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;Sonnet IV\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;\n&quot; +&#10;        &quot;Unthrifty loveliness, why dost thou spend\n&quot; +&#10;        &quot;Upon thyself thy beauty's legacy?\n&quot; +&#10;        &quot;Nature's bequest gives nothing but doth lend,\n&quot; +&#10;        &quot;And being frank she lends to those are free.\n&quot; +&#10;        &quot;Then, beauteous niggard, why dost thou abuse\n&quot; +&#10;        &quot;The bounteous largess given thee to give?\n&quot; +&#10;        &quot;Profitless usurer, why dost thou use\n&quot; +&#10;        &quot;So great a sum of sums, yet canst not live?\n&quot; +&#10;        &quot;For having traffic with thyself alone,\n&quot; +&#10;        &quot;Thou of thyself thy sweet self dost deceive.\n&quot; +&#10;        &quot;Then how, when nature calls thee to be gone,\n&quot; +&#10;        &quot;What acceptable audit canst thou leave?\n&quot; +&#10;        &quot;Thy unused beauty must be tomb'd with thee,\n&quot; +&#10;        &quot;Which, used, lives th' executor to be.&quot;;&#10;&#10;    public void fileAction() {&#10;        if(!fileChooser.target().isVisible()) {&#10;            throw new AssertionError();&#10;        }&#10;        frame.setVisible(false);&#10;        fileChooser.setCurrentDirectory(fileDir);&#10;        fileChooser.fileNameTextBox().setText(searchField.text());&#10;        fileChooser.approve();&#10;        frame.setVisible(true);&#10;    }&#10;&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generate() {&#10;        return List.of(&#10;&#10;            // general tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Title is empty&quot;,&#10;                () -&gt; frame.getTitle().length() &gt; 0)),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Window is not visible&quot;,&#10;                () -&gt; frame.isVisible())),&#10;&#10;&#10;            // existence tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no text component with name TextArea&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    textArea = window.textBox(&quot;TextArea&quot;);&#10;                    return textArea;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no text component with name SearchField&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    searchField = window.textBox(&quot;SearchField&quot;);&#10;                    return searchField;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no button with name SaveButton&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    saveButton = window.button(&quot;SaveButton&quot;);&#10;                    return saveButton;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no button with name OpenButton&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    openButton = window.button(&quot;OpenButton&quot;);&#10;                    return openButton;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no button with name StartSearchButton&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    startSearchButton = window.button(&quot;StartSearchButton&quot;);&#10;                    return startSearchButton;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no button with name PreviousMatchButton&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    previousMatchButton = window.button(&quot;PreviousMatchButton&quot;);&#10;                    return previousMatchButton;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no button with name NextMatchButton&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    nextMatchButton = window.button(&quot;NextMatchButton&quot;);&#10;                    return nextMatchButton;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no button with name UseRegExCheckbox&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    useRegExCheckbox = window.checkBox(&quot;UseRegExCheckbox&quot;);&#10;                    return useRegExCheckbox;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no scroll component with name ScrollPane&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    scrollPane = window.scrollPane(&quot;ScrollPane&quot;);&#10;                    return scrollPane;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuFile&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuFile = window.menuItem(&quot;MenuFile&quot;);&#10;                    return menuFile;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuSearch&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuSearch = window.menuItem(&quot;MenuSearch&quot;);&#10;                    return menuSearch;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuOpen&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuOpen = window.menuItem(&quot;MenuOpen&quot;);&#10;                    return menuOpen;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuSave&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuSave = window.menuItem(&quot;MenuSave&quot;);&#10;                    return menuSave;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuExit&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuExit = window.menuItem(&quot;MenuExit&quot;);&#10;                    return menuExit;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuStartSearch&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuStartSearch = window.menuItem(&quot;MenuStartSearch&quot;);&#10;                    return menuStartSearch;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuPreviousMatch&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuPreviousMatch = window.menuItem(&quot;MenuPreviousMatch&quot;);&#10;                    return menuPreviousMatch;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuNextMatch&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuNextMatch = window.menuItem(&quot;MenuNextMatch&quot;);&#10;                    return menuNextMatch;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no menu option with name MenuUseRegExp&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    menuUseRegExp = window.menuItem(&quot;MenuUseRegExp&quot;);&#10;                    return menuUseRegExp;&#10;                }))),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;There is no component with name FileChooser&quot;,&#10;                () -&gt; checkExistence(() -&gt; {&#10;                    fileChooser = window.fileChooser(&quot;FileChooser&quot;);&#10;                    return fileChooser;&#10;                }))),&#10;&#10;&#10;            // ui tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be editable&quot;,&#10;                () -&gt; {&#10;                    textArea.requireEditable();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be empty at the start of the program&quot;,&#10;                () -&gt; {&#10;                    textArea.requireEmpty();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;SearchField should be empty at the start of the program&quot;,&#10;                () -&gt; {&#10;                    searchField.requireEmpty();&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;SaveButton should be enabled for clicking&quot;,&#10;                () -&gt; saveButton.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;OpenButton should be enabled for clicking&quot;,&#10;                () -&gt; openButton.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;StartSearchButton should be enabled for clicking&quot;,&#10;                () -&gt; startSearchButton.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;NextMatchButton should be enabled for clicking&quot;,&#10;                () -&gt; nextMatchButton.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;PreviousMatchButton should be enabled for clicking&quot;,&#10;                () -&gt; previousMatchButton.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuLoad should be enabled for clicking&quot;,&#10;                () -&gt; menuOpen.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuSave should be enabled for clicking&quot;,&#10;                () -&gt; menuSave.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuFile should be enabled for clicking&quot;,&#10;                () -&gt; menuFile.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuExit should be enabled for clicking&quot;,&#10;                () -&gt; menuExit.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuStartSearch should be enabled for clicking&quot;,&#10;                () -&gt; menuStartSearch.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuPreviousMatch should be enabled for clicking&quot;,&#10;                () -&gt; menuPreviousMatch.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuNextMatch should be enabled for clicking&quot;,&#10;                () -&gt; menuNextMatch.isEnabled())),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuUseRegExp should be enabled for clicking&quot;,&#10;                () -&gt; menuUseRegExp.isEnabled())),&#10;&#10;&#10;            // logic tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;FileChooser doesn't appear on the second &quot; +&#10;                    &quot;press on SaveButton but should appear every time&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(filename1);&#10;                    textArea.setText(textToSave1);&#10;&#10;                    saveButton.click();&#10;&#10;                    try {&#10;                        fileAction();&#10;                    }&#10;                    catch (IllegalStateException ex) {&#10;                        return false;&#10;                    }&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text should be the same after saving and loading same file&quot;,&#10;                () -&gt; {&#10;                    String[] texts = {textToSave2, textToSave1};&#10;                    String[] files = {filename1, filename2};&#10;&#10;                    for (int i = 0; i &lt; 2; i++) {&#10;&#10;                        String text = texts[i];&#10;                        String file = files[i];&#10;&#10;                        searchField.setText(&quot;&quot;);&#10;                        textArea.setText(&quot;&quot;);&#10;&#10;                        searchField.setText(file);&#10;                        textArea.setText(text);&#10;&#10;                        saveButton.click();&#10;                        fileAction();&#10;&#10;                        searchField.setText(&quot;&quot;);&#10;                        textArea.setText(&quot;&quot;);&#10;&#10;                        searchField.setText(file);&#10;                        openButton.click();&#10;                        fileAction();&#10;&#10;                        textArea.requireText(text);&#10;                    }&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be empty if user tries to &quot; +&#10;                    &quot;load file that doesn't exist&quot;,&#10;                () -&gt; {&#10;&#10;                    textArea.setText(textToSave1);&#10;                    searchField.setText(noExistFile);&#10;&#10;                    openButton.click();&#10;                    fileAction();&#10;                    textArea.requireText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should correctly save and load an empty file&quot;,&#10;                () -&gt; {&#10;                    textArea.setText(&quot;&quot;);&#10;                    searchField.setText(filename1);&#10;&#10;                    saveButton.click();&#10;                    fileAction();&#10;                    textArea.setText(textToSave2);&#10;                    openButton.click();&#10;                    fileAction();&#10;                    textArea.requireText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;&#10;&#10;            // menu-related tests for save and load&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Text should be the same after saving &quot; +&#10;                    &quot;and loading same file using MenuLoad&quot;,&#10;                () -&gt; {&#10;                    String[] texts = {textToSave2, textToSave1};&#10;                    String[] files = {filename1, filename2};&#10;&#10;                    for (int i = 0; i &lt; 2; i++) {&#10;&#10;                        String text = texts[i];&#10;                        String file = files[i];&#10;&#10;                        searchField.setText(&quot;&quot;);&#10;                        textArea.setText(&quot;&quot;);&#10;&#10;                        searchField.setText(file);&#10;                        textArea.setText(text);&#10;&#10;                        menuSave.click();&#10;                        fileAction();&#10;&#10;                        searchField.setText(&quot;&quot;);&#10;                        textArea.setText(&quot;&quot;);&#10;&#10;                        searchField.setText(file);&#10;                        menuOpen.click();&#10;                        fileAction();&#10;&#10;                        textArea.requireText(text);&#10;                    }&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should be empty if user tries to &quot; +&#10;                    &quot;load file that doesn't exist using MenuLoad&quot;,&#10;                () -&gt; {&#10;&#10;                    textArea.setText(textToSave1);&#10;                    searchField.setText(noExistFile);&#10;&#10;                    menuOpen.click();&#10;                    fileAction();&#10;                    textArea.requireText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;TextArea should correctly save &quot; +&#10;                    &quot;and load an empty file using menu&quot;,&#10;                () -&gt; {&#10;                    textArea.setText(&quot;&quot;);&#10;                    searchField.setText(filename1);&#10;&#10;                    menuSave.click();&#10;                    fileAction();&#10;                    textArea.setText(textToSave2);&#10;                    menuOpen.click();&#10;                    fileAction();&#10;                    textArea.requireText(&quot;&quot;);&#10;&#10;                    return true;&#10;                })),&#10;&#10;&#10;            // search related tests&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;After clicking SearchButton should &quot; +&#10;                    &quot;be selected founded text&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;                    startSearchButton.click();&#10;&#10;                    return textArea.target().getSelectedText().equals(searchText);&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;After clicking NextMatchButton should &quot; +&#10;                    &quot;be selected founded text&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;                    startSearchButton.click();&#10;                    nextMatchButton.click();&#10;&#10;                    return textArea.target().getSelectedText().equals(searchText);&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;After clicking PreviousMatchButton should &quot; +&#10;                    &quot;be selected founded text&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;                    startSearchButton.click();&#10;                    previousMatchButton.click();&#10;&#10;                    return textArea.target().getSelectedText().equals(searchText);&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;After clicking MenuStartSearch should &quot; +&#10;                    &quot;be selected founded text&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;                    menuStartSearch.click();&#10;&#10;                    return textArea.target().getSelectedText().equals(searchText);&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;After clicking MenuNextMatch should &quot; +&#10;                    &quot;be selected founded text&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;                    startSearchButton.click();&#10;                    menuNextMatch.click();&#10;&#10;                    return textArea.target().getSelectedText().equals(searchText);&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;After clicking MenuPreviousMatch should &quot; +&#10;                    &quot;be selected founded text&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;                    startSearchButton.click();&#10;                    menuPreviousMatch.click();&#10;&#10;                    return textArea.target().getSelectedText().equals(searchText);&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Wrong caret position after clicking SearchButton &quot; +&#10;                    &quot;(should be at the end of founded text)&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;&#10;                    startSearchButton.click();&#10;&#10;                    // confirmed with working program AND provided text&#10;                    return textArea.target().getCaretPosition() == 16;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Wrong caret position after clicking SearchButton &quot; +&#10;                    &quot;(should be at the end of founded text)&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;&#10;                    menuStartSearch.click();&#10;&#10;                    // confirmed with working program AND provided text&#10;                    return textArea.target().getCaretPosition() == 16;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Wrong caret position after clicking NextMatchButton&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;&#10;                    startSearchButton.click();&#10;                    nextMatchButton.click();&#10;&#10;                    // confirmed with working program&#10;                    return textArea.target().getCaretPosition() == 640;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Wrong caret position after clicking MenuNextMatch&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;&#10;                    menuStartSearch.click();&#10;                    menuNextMatch.click();&#10;&#10;                    // confirmed with working program&#10;                    return textArea.target().getCaretPosition() == 640;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Wrong caret position after clicking PreviousMatchButton&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;&#10;                    startSearchButton.click();&#10;                    previousMatchButton.click();&#10;&#10;                    // confirmed with working program&#10;                    return textArea.target().getCaretPosition() == 1921;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Wrong caret position after clicking MenuPreviousMatch&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(searchText);&#10;                    textArea.setText(textToSave2);&#10;&#10;                    startSearchButton.click();&#10;                    menuPreviousMatch.click();&#10;&#10;                    // confirmed with working program&#10;                    return textArea.target().getCaretPosition() == 1921;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Checkbox is not clickable&quot;,&#10;                () -&gt; {&#10;                    useRegExCheckbox.check(true);&#10;                    return useRegExCheckbox.target().isSelected();&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;MenuUseRegExp does't work&quot;,&#10;                () -&gt; {&#10;                    useRegExCheckbox.check(false);&#10;                    menuUseRegExp.click();&#10;                    return useRegExCheckbox.target().isSelected();&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Wrong caret position after clicking SearchButton &quot; +&#10;                    &quot;using regular expression&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(regExSearchText);&#10;                    textArea.setText(textToSave2);&#10;&#10;                    startSearchButton.click();&#10;&#10;                    // confirmed with working program AND provided text&#10;                    return textArea.target().getCaretPosition() == 288;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Wrong caret position after clicking NextSearchButton &quot; +&#10;                    &quot;using regular expression&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(regExSearchText);&#10;                    textArea.setText(textToSave2);&#10;&#10;                    menuStartSearch.click();&#10;                    nextMatchButton.click();&#10;&#10;                    // confirmed with working program AND provided text&#10;                    return textArea.target().getCaretPosition() == 372;&#10;                })),&#10;&#10;            new TestCase&lt;TestClue&gt;().setAttach(new TestClue(&#10;                &quot;Wrong caret position after clicking PreviousMatchButton &quot; +&#10;                    &quot;using regular expression&quot;,&#10;                () -&gt; {&#10;                    searchField.setText(regExSearchText);&#10;                    textArea.setText(textToSave2);&#10;&#10;                    menuStartSearch.click();&#10;                    previousMatchButton.click();&#10;&#10;                    // confirmed with working program AND provided text&#10;                    return textArea.target().getCaretPosition() == 372;&#10;                }))&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;        try {&#10;            return new CheckResult(clue.function.get(), clue.feedback);&#10;        }&#10;        catch (AssertionError ex) {&#10;            return new CheckResult(false, clue.feedback);&#10;        }&#10;    }&#10;&#10;    @After&#10;    public void deleteFiles() {&#10;        try {&#10;            Files.deleteIfExists(Paths.get(filename1));&#10;            Files.deleteIfExists(Paths.get(filename2));&#10;        }&#10;        catch (Exception ex) {&#10;            ex.printStackTrace();&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/editor/TextEditor.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/editor/TextEditor.java" />
                                <option name="text" value="package editor;&#10;&#10;&#10;import javax.swing.*;&#10;import javax.swing.border.EmptyBorder;&#10;import java.awt.event.KeyEvent;&#10;import java.io.FileWriter;&#10;import java.io.IOException;&#10;import java.nio.file.Files;&#10;import java.nio.file.Paths;&#10;&#10;public class TextEditor extends JFrame {&#10;    public TextEditor() {&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setBounds(700, 300, 450, 300);&#10;        setTitle(&quot;Text editor&quot;);&#10;&#10;        JMenuBar menuBar = new JMenuBar();&#10;        JMenu fileMenu = new JMenu(&quot;File&quot;);&#10;        fileMenu.setName(&quot;MenuFile&quot;);&#10;        fileMenu.setMnemonic(KeyEvent.VK_F);&#10;        menuBar.add(fileMenu);&#10;&#10;        JMenuItem loadMenuItem = new JMenuItem(&quot;Load&quot;);&#10;        loadMenuItem.setName(&quot;MenuLoad&quot;);&#10;        JMenuItem saveMenuItem = new JMenuItem(&quot;Save&quot;);&#10;        saveMenuItem.setName(&quot;MenuSave&quot;);&#10;        JMenuItem exitMenuItem = new JMenuItem(&quot;Exit&quot;);&#10;        exitMenuItem.setName(&quot;MenuExit&quot;);&#10;&#10;        fileMenu.add(loadMenuItem);&#10;        fileMenu.add(saveMenuItem);&#10;        fileMenu.addSeparator();&#10;        fileMenu.add(exitMenuItem);&#10;&#10;        JPanel contentPane = new JPanel();&#10;        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));&#10;        setContentPane(contentPane);&#10;&#10;        JTextField textField= new JTextField();&#10;        textField.setName(&quot;FilenameField&quot;);&#10;&#10;        JButton btnSave = new JButton(&quot;Save&quot;);&#10;        btnSave.setName(&quot;SaveButton&quot;);&#10;&#10;        JButton btnLoad = new JButton(&quot;Load&quot;);&#10;        btnLoad.setName(&quot;LoadButton&quot;);&#10;&#10;        JTextArea textArea = new JTextArea();&#10;        textArea.setName(&quot;TextArea&quot;);&#10;        JScrollPane scrollableTextArea = new JScrollPane(textArea);&#10;        scrollableTextArea.setName(&quot;ScrollPane&quot;);&#10;        scrollableTextArea.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);&#10;        scrollableTextArea.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);&#10;&#10;        //group layout is used&#10;        GroupLayout gl_contentPane = new GroupLayout(contentPane);&#10;        gl_contentPane.setHorizontalGroup(&#10;                gl_contentPane.createParallelGroup(GroupLayout.Alignment.LEADING)&#10;                        .addGroup(gl_contentPane.createSequentialGroup()&#10;                                .addGap(5)&#10;                                .addGroup(gl_contentPane.createParallelGroup(GroupLayout.Alignment.LEADING)&#10;                                        .addGroup(gl_contentPane.createSequentialGroup()&#10;                                                .addComponent(textField, GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)&#10;                                                .addGap(10)&#10;                                                .addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 89, GroupLayout.PREFERRED_SIZE)&#10;                                                .addGap(10)&#10;                                                .addComponent(btnLoad, GroupLayout.PREFERRED_SIZE, 89, GroupLayout.PREFERRED_SIZE))&#10;                                        .addComponent(scrollableTextArea, GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))&#10;                                .addGap(18))&#10;        );&#10;        gl_contentPane.setVerticalGroup(&#10;                gl_contentPane.createParallelGroup(GroupLayout.Alignment.LEADING)&#10;                        .addGroup(gl_contentPane.createSequentialGroup()&#10;                                .addGap(5)&#10;                                .addGroup(gl_contentPane.createParallelGroup(GroupLayout.Alignment.LEADING, false)&#10;                                        .addGroup(gl_contentPane.createSequentialGroup()&#10;                                                .addGap(1)&#10;                                                .addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)&#10;                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE))&#10;                                        .addComponent(btnSave)&#10;                                        .addComponent(btnLoad))&#10;                                .addGap(11)&#10;                                .addComponent(scrollableTextArea, GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)&#10;                                .addGap(4))&#10;        );&#10;&#10;        btnLoad.addActionListener(actionEvent -&gt; {&#10;            try{&#10;                textArea.setText(Files.readString(Paths.get(textField.getText())));&#10;            } catch (IOException e) {&#10;                textArea.setText(&quot;&quot;);&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;&#10;        loadMenuItem.addActionListener(actionEvent -&gt; {&#10;            try{&#10;                textArea.setText(Files.readString(Paths.get(textField.getText())));&#10;            } catch (IOException e) {&#10;                textArea.setText(&quot;&quot;);&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;&#10;        btnSave.addActionListener(actionEvent -&gt; {&#10;            try(FileWriter fileWriter = new FileWriter(textField.getText())) {&#10;                fileWriter.write(textArea.getText());&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;        saveMenuItem.addActionListener(actionEvent -&gt; {&#10;            try(FileWriter fileWriter = new FileWriter(textField.getText())) {&#10;                fileWriter.write(textArea.getText());&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;&#10;        setJMenuBar(menuBar);&#10;        contentPane.setLayout(gl_contentPane);&#10;        setVisible(true);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/editor/ApplicationRunner.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/editor/ApplicationRunner.java" />
                                <option name="text" value="package editor;&#10;&#10;&#10;public class ApplicationRunner {&#10;    public static void main(String[] args) {&#10;        new TextEditor();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/editor/file">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/editor/file" />
                                <option name="text" value="Hello guys" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>